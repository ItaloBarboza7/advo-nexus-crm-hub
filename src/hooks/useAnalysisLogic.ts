
import { useMemo } from "react";
import { Lead } from "@/types/lead";

interface LeadStatusHistory {
  id: string;
  lead_id: string;
  old_status: string | null;
  new_status: string;
  changed_at: string;
}

export const useAnalysisLogic = (
  leads: Lead[], 
  selectedCategory: string,
  statusHistory: LeadStatusHistory[],
  hasLeadPassedThroughStatus: (leadId: string, statuses: string[]) => boolean
) => {
  const getLeadsForChart = useMemo(() => {
    let categoryFilteredLeads = leads;
    
    // Extrair a categoria principal (antes do h√≠fen se houver)
    const mainCategory = selectedCategory.split('-')[0];
    
    console.log(`üîç getLeadsForChart - selectedCategory: ${selectedCategory}, mainCategory: ${mainCategory}`);
    
    if (mainCategory === "perdas") {
      categoryFilteredLeads = leads.filter(lead => lead.status === "Perdido");
    } else if (mainCategory === "contratos") {
      categoryFilteredLeads = leads.filter(lead => lead.status === "Contrato Fechado");
    } else if (mainCategory === "oportunidades") {
      // NOVA REGRA CORRIGIDA: Oportunidades s√£o leads que:
      // 1. N√ÉO est√£o em "Novo" (independente do hist√≥rico)
      // 2. Est√£o atualmente em "Proposta" ou "Reuni√£o" OU passaram por eles (hist√≥rico)
      categoryFilteredLeads = leads.filter(lead => {
        console.log(`üîç Analisando lead ${lead.name} (${lead.id}) com status atual: ${lead.status}`);
        
        // PRIMEIRO: Excluir completamente leads com status "Novo"
        if (lead.status === "Novo") {
          console.log(`‚ùå Lead ${lead.name} est√° em Novo - SEMPRE EXCLU√çDO de oportunidades`);
          return false;
        }
        
        // SEGUNDO: Se est√° em Proposta ou Reuni√£o atualmente, incluir automaticamente
        if (lead.status === "Proposta" || lead.status === "Reuni√£o") {
          console.log(`‚úÖ Lead ${lead.name} est√° atualmente em ${lead.status} - INCLU√çDO`);
          return true;
        }
        
        // TERCEIRO: Verificar se passou por Proposta/Reuni√£o no hist√≥rico (incluindo finalizados)
        const hasPassedThroughTargetStatuses = hasLeadPassedThroughStatus(lead.id, ["Proposta", "Reuni√£o"]);
        console.log(`üìä Lead ${lead.name} (${lead.status}) passou por Proposta/Reuni√£o: ${hasPassedThroughTargetStatuses}`);
        
        if (hasPassedThroughTargetStatuses) {
          console.log(`‚úÖ Lead ${lead.name} passou por Proposta/Reuni√£o - INCLU√çDO mesmo estando em ${lead.status}`);
          return true;
        }
        
        console.log(`‚ùå Lead ${lead.name} n√£o passou por Proposta/Reuni√£o - EXCLU√çDO`);
        return false;
      });
    } else if (selectedCategory === "estados") {
      categoryFilteredLeads = leads;
    }
    // Para categoria "all", retornar todos os leads
    else if (selectedCategory === "all") {
      categoryFilteredLeads = leads;
    }
    
    console.log(`üéØ Total de leads filtrados para ${selectedCategory}:`, categoryFilteredLeads.length);
    console.log(`üìã Leads inclu√≠dos:`, categoryFilteredLeads.map(l => `${l.name} (${l.status})`));
    
    return categoryFilteredLeads;
  }, [leads, selectedCategory, statusHistory, hasLeadPassedThroughStatus]);

  // CORRE√á√ÉO: Permitir exibi√ß√£o de gr√°ficos tamb√©m para categoria "all"
  const shouldShowChart = () => true;
  
  const shouldShowLossReasonsChart = () => {
    console.log(`üîç shouldShowLossReasonsChart - selectedCategory: ${selectedCategory}`);
    // CORRE√á√ÉO: Mostrar gr√°fico de motivos de perda quando categoria √© "perdas" (clique direto)
    const shouldShow = selectedCategory === "perdas";
    console.log(`üìä shouldShowLossReasonsChart - shouldShow: ${shouldShow} para ${selectedCategory}`);
    return shouldShow;
  };
  
  const shouldShowActionTypesChart = () => {
    console.log(`üîç shouldShowActionTypesChart - selectedCategory: ${selectedCategory}`);
    // CORRE√á√ÉO: Mostrar gr√°fico de tipos de a√ß√£o quando:
    // 1. Categoria principal (contratos, oportunidades) OU
    // 2. Categoria com sufixo -tipo-acao
    // MAS N√ÉO quando for grupo de a√ß√£o
    const mainCategory = selectedCategory.split('-')[0];
    const isMainCategory = mainCategory === "contratos" || mainCategory === "oportunidades";
    const isTypeActionCategory = selectedCategory.includes("-tipo-acao");
    const isGroupActionCategory = selectedCategory.includes("-grupo-acao");
    
    // Se for grupo de a√ß√£o, N√ÉO mostrar tipo de a√ß√£o
    if (isGroupActionCategory) {
      const shouldShow = false;
      console.log(`üìä shouldShowActionTypesChart - shouldShow: ${shouldShow} para ${selectedCategory} (grupo de a√ß√£o)`);
      return shouldShow;
    }
    
    const shouldShow = isMainCategory || isTypeActionCategory;
    console.log(`üìä shouldShowActionTypesChart - shouldShow: ${shouldShow} para ${selectedCategory}`);
    return shouldShow;
  };
  
  const shouldShowActionGroupChart = () => {
    console.log(`üîç shouldShowActionGroupChart - selectedCategory: ${selectedCategory}`);
    const shouldShow = selectedCategory === "contratos-grupo-acao" || 
                       selectedCategory === "oportunidades-grupo-acao" ||
                       selectedCategory === "perdas-grupo-acao";
    console.log(`üìä shouldShowActionGroupChart - shouldShow: ${shouldShow} para ${selectedCategory}`);
    return shouldShow;
  };
  
  const shouldShowStateChart = () => {
    console.log(`üîç shouldShowStateChart - selectedCategory: ${selectedCategory}`);
    // CORRE√á√ÉO: Incluir a categoria "estados" principal
    const shouldShow = selectedCategory === "estados" || 
                      selectedCategory === "contratos-estados" || 
                      selectedCategory === "oportunidades-estados" || 
                      selectedCategory === "perdas-estados";
    console.log(`üìä shouldShowStateChart - shouldShow: ${shouldShow} para ${selectedCategory}`);
    return shouldShow;
  };

  return {
    getLeadsForChart,
    shouldShowChart,
    shouldShowLossReasonsChart,
    shouldShowActionTypesChart,
    shouldShowActionGroupChart,
    shouldShowStateChart
  };
};
