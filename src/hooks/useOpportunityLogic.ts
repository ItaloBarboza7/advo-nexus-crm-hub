
import { Lead } from "@/types/lead";

export const useOpportunityLogic = (
  hasLeadPassedThroughStatus: (leadId: string, statuses: string[]) => boolean
) => {
  const isOpportunityLead = (lead: Lead): boolean => {
    console.log(`üîç [useOpportunityLogic] Verificando se ${lead.name} (${lead.status}) √© oportunidade`);
    
    // PRIMEIRO: Excluir completamente leads com status "Novo"
    if (lead.status === "Novo") {
      console.log(`‚ùå [useOpportunityLogic] Lead ${lead.name} est√° em Novo - SEMPRE EXCLU√çDO`);
      return false;
    }
    
    // SEGUNDO: Excluir leads com status final (Perdido/Contrato Fechado)
    if (lead.status === "Perdido" || lead.status === "Contrato Fechado") {
      console.log(`‚ùå [useOpportunityLogic] Lead ${lead.name} est√° em status final (${lead.status}) - EXCLU√çDO`);
      return false;
    }
    
    // TERCEIRO: Para leads em outros status, verificar se passaram por Proposta/Reuni√£o
    const hasPassedThroughTargetStatuses = hasLeadPassedThroughStatus(lead.id, ["Proposta", "Reuni√£o"]);
    console.log(`üìä [useOpportunityLogic] Lead ${lead.name} (${lead.status}) passou por Proposta/Reuni√£o: ${hasPassedThroughTargetStatuses}`);
    
    // Se est√° em Proposta ou Reuni√£o atualmente, incluir automaticamente
    if (lead.status === "Proposta" || lead.status === "Reuni√£o") {
      console.log(`‚úÖ [useOpportunityLogic] Lead ${lead.name} est√° atualmente em ${lead.status} - INCLU√çDO`);
      return true;
    }
    
    // Para outros status, deve ter passado por Proposta/Reuni√£o
    if (!hasPassedThroughTargetStatuses) {
      console.log(`‚ùå [useOpportunityLogic] Lead ${lead.name} n√£o passou por Proposta/Reuni√£o - EXCLU√çDO`);
      return false;
    }
    
    console.log(`‚úÖ [useOpportunityLogic] Lead ${lead.name} passou por Proposta/Reuni√£o e est√° em ${lead.status} - INCLU√çDO`);
    return true;
  };

  return { isOpportunityLead };
};
